#!/usr/bin/env -S scala-cli shebang

// inspired by Roy Tang, https://roytang.net/2021/11/mastodon-api-python/
// with help from Chris Jones, https://chrisjones.io/articles/using-php-and-curl-to-post-media-to-the-mastodon-api/

//> using scala "3.3.0"
//> using dep "com.lihaoyi::requests:0.8.0"
//> using dep "com.lihaoyi::upickle:3.1.2"
//> using dep "com.lihaoyi::pprint:0.7.0"
//> using dep "com.monovore::decline:2.4.1"

import java.io.{BufferedInputStream, InputStream}
import java.net.{URL,URLEncoder}
import java.nio.file.*

import scala.util.Using

import com.monovore.decline.*
import cats.implicits.*        // for mapN

case class Config( text : String, url : String, accessToken : String, media : List[String], verbose : Boolean)

val urlHelp = "The URL of the instance to which you wish to post."
val accessTokenHelp = "The access token to authenticate under."

val text    = Opts.option[String] ("text",         short="t", help="The text of your toot.")
val url     = Opts.option[String] ("url",          short="u", help=urlHelp)                  orElse Opts.env[String]("MASTO_INSTANCE_URL", help=urlHelp)
val token   = Opts.option[String] ("access-token", short="a", help=accessTokenHelp)          orElse Opts.env[String]("MASTO_ACCESS_TOKEN", help=accessTokenHelp)

val media  = Opts.options[String]("media", help = "The file or URL of media to attach.").orEmpty
val verbose = Opts.flag("verbose", help="Print more information to the console.").orFalse
val allOpts = (text, url, token, media, verbose).mapN( (t, u, at, i, v) => Config(t,u,at,i,v) ) // a bit annoying

def pathJoin( a : String, b : String ) : String =
  val normA = if a.last == '/' then a.init else a
  val normB = if b.head == '/' then b.tail else b
  s"${normA}/${normB}"

def postMedia( config : Config, mediaSource : InputStream, filename : String ) : String = // returns the ID of the new media object
  val mediaEndpoint = pathJoin( config.url, "api/v2/media" )
  val multipart = requests.MultiPart( requests.MultiItem("file", data=mediaSource, filename=filename) )
  val headers             = Map (
    "Authorization" -> s"Bearer ${config.accessToken}",
  )
  val response =
    try requests.post( mediaEndpoint, data=multipart, headers=headers )
    catch
      case rfe : requests.RequestFailedException => rfe.response
  if response.statusCode / 100 == 2 then    
    if config.verbose then
      System.err.println(s"Media upload succeeded:")
      System.err.println(pprint(response))
      System.err.println()
    var jsonOut = ujson.read(response.text())
    jsonOut.obj("id").str // the id comes back as a JSON *String*, not a number
  else
    val rt = response.text()
    val rtPart = if rt.isEmpty then "no response text." else s"response text: ${response.text()}"
    val msg = s"Upload of media '${filename}' failed! Status code ${response.statusCode}, ${rtPart}"
    System.err.println(msg)
    if config.verbose then System.err.println(pprint(response))
    throw new Exception(msg)

class MediaStream(val filename : String, is : InputStream) extends BufferedInputStream(is)

def mediaToMediaStream( media : String ) : MediaStream =
  def namep( path : Path ) = path.getFileName().toString
  def nameu( u : URL ) =
    val upath = u.getPath
    val lastSlash = upath.lastIndexOf("/")
    val check = if lastSlash >= 0 then upath.substring(lastSlash + 1) else upath
    if check.isEmpty then "unknown" else check
  val path = Path.of(media)
  if Files.exists( path ) then
    new MediaStream(namep(path), Files.newInputStream(path))
  else
    val u = new URL(media)
    new MediaStream(nameu(u), u.openStream())

def prepareMedia( config : Config ) : Seq[String] =
  config.media.map { media =>
    Using(mediaToMediaStream(media)) { ms =>
      postMedia( config, ms, ms.filename )
    }.get
  }

// the return value will become the exit code of our script
def post( config : Config ) : Int =
  val mediaIds            = prepareMedia( config )
  val statusEndpoint      = pathJoin( config.url, "api/v1/statuses/" )
  val headers             = Map (
    "Authorization" -> s"Bearer ${config.accessToken}",
    "Content-Type"  ->  "application/json",
  )

  val jsonData =
    val obj = ujson.Obj(
      "status" -> ujson.Str(config.text),
      "media_ids" -> ujson.Arr( mediaIds.map( ujson.Str.apply )* ),
    )
    ujson.write(obj)

  // we catch failures resulting from bad status codes, rather than just
  // fail with exception, so we can print more informative errors
  val response =
    try requests.post( statusEndpoint, data=jsonData, headers=headers )
    catch
      case rfe : requests.RequestFailedException => rfe.response
      
  if config.verbose then System.err.println( pprint( response ) )
  if response.statusCode == 200 then
    if config.verbose then System.err.println("Post succeeded.")
    0 // good exit code
  else
    val rt = response.text()
    val rtPart = if rt.isEmpty then "no response text." else s"response text: ${response.text()}"
    System.err.println(s"Attempt to post failed! Status code ${response.statusCode}, ${rtPart}")
    9 // arbitrary bad exit code

val command = Command(name="mastopost", header="Posts toots to Mastodon.")( allOpts )

command.parse(args.toIndexedSeq, sys.env) match
  case Left(help) =>
    println(help)
    System.exit(1)
  case Right( config ) =>
    val exitCode = post( config )
    System.exit(exitCode)







